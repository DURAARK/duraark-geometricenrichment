var spawn = require('child_process').spawn,
  uuid = require('node-uuid'),
  path = require('path'),
  fs = require('fs'),
  mkdirp = require('mkdirp'),
  _ = require('lodash'),
  Promise = require("bluebird");
  imgsize = require('image-size');

/**
 * Provides NodeJS-Javascript bindings for the 'orthogen' executable.
 *
 * @module widget
 */
var Elecdetec = module.exports = function() {};

function copyFile(source, target) {
  return new Promise(function(resolve, reject) {
    console.log('[Elecdetect::copyImages]: ' + source + " --> " + target);

    var rd = fs.createReadStream(source);
    rd.on('error', reject);
    var wr = fs.createWriteStream(target);
    wr.on('error', reject);
    wr.on('finish', resolve);
    rd.pipe(wr);
  });
}

function defaultConfig() {
  return {
    "detection" : {
      "result_directory_name" : "results",
      "write_probability_maps" : "true",
      "filename_result_suffix" : "-result",
      "prob_map_result_suffix" : "-probmap",
      "max_boundingbox_overlap" : "0.7",
      "detection_default_threshold" : "0.5",
      "detection_label_thresholds" : "0.26, 0.65",
      "detection_labels" : "1, 2"
    }, 
    "training" : {
      "label_delimiter" : "_ ",
      "max_bootstrap_stages" : "10"
    },
    "common" : {
    "patch_window_size" : "128",
    "file_extentions" : "jpg,jpeg,png",
    "background_label" : "0"
    }
  };
}

function config2ini(config) {
  ini = "; Elecdetect config file generated by duraark-geometricenrichemnt service\n";
  for (var category in config)
  {
    ini += "[" + category + "]\n";
    for (var key in config[category]) {
      ini += key + " = " + config[category][key] + "\n";
    }
  }
  return ini;
}

Elecdetec.prototype.defaultConfig = defaultConfig;
Elecdetec.prototype.config2ini = config2ini;

Elecdetec.prototype.createElecImages = function(session, config) {


  return new Promise(function(resolve, reject) {

    session.status = 'pending';
    session.elecdetecExecutable = path.join(__dirname, '../../../app/ElecDetec-windows/'); //Config.xml, config.ini & elecdetect.exe

    console.log("running mkdirp");
    mkdirp(session.elecdetecPath, function(err) {
      if (err) { console.log("aÃ¶sldkgh" + err); }
      if (!err) {
        
        promises = [];

        // get orthogen images
        var cwd = process.cwd();
        process.chdir(session.orthoresult);
        var files = fs.readdirSync(session.orthoresult);
        files.forEach(function(oldFile) {
          if (path.extname(oldFile) == '.jpg') {
            var newFile = path.join(session.elecdetecPath, path.basename(oldFile));
            var dimensions = imgsize(oldFile);
            if ((dimensions.width > 128) && (dimensions.height > 128)) {
              console.log(oldFile + '-->' + newFile)
              promises.push(copyFile(oldFile, newFile));
            }            
          }
        });

        Promise.all(promises).then(function() {

            // write config            
            process.chdir(session.workingDir);
            if (!config) {
              config = defaultConfig();
            }
            fs.writeFileSync('config.ini', config2ini(config));

            var args = ['-m', 'detect',
              '-d', session.elecdetecPath,
              '-c', path.join(session.elecdetecExecutable, 'config.xml'),
              '-i', path.join(session.workingDir, 'config.ini')
            ];

            var executable = spawn(path.join(session.elecdetecExecutable, 'ElecDetec.exe'), args);

            executable.stdout.on('data', function(data) {
              console.log(data.toString());
            });

            executable.stderr.on('data', function(data) {
              console.log('ERROR: ' + data.toString());
            });

            executable.on('close', function(code) {
              console.log('[Elecdetec-binding] child process exited with code ' + code);

              session.status = 'Elecdetec-finished';
              resolve(session);
            });
          });
      } else {
        console.log('Error creating test-set directory. Aborting!');
        console.log('  Error message: ' + err);
        reject(err);
      }
    });
  });

};
